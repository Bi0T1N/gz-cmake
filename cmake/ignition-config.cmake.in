# - Config file for the @PKG_NAME@ package.
#
# For finding and loading @PKG_NAME@ from your project, type:
#
# find_package(@PKG_NAME@)
#
# It defines the following variables:
#
#  @PKG_NAME@_FOUND        - System has @PKG_NAME@.
#  @PKG_NAME@_LIBRARIES    - Libraries to link against.
#  @PKG_NAME@_INCLUDE_DIRS - include directories for @PKG_NAME@ and its dependencies.
#
# Additionally, it will create an imported target named @import_target_name@.
# You can link your library against that target using target_link_library(~),
# and all the interface build variables will be pulled into your target.

# We explicitly set the desired cmake version to ensure that the policy settings
# of users or of toolchains do not result in the wrong behavior for our modules.
# Note that the call to find_package(~) will PUSH a new policy stack before
# taking on these version settings, and then that stack will POP after the
# find_package(~) has exited, so this will not affect the cmake policy settings
# of a caller.
cmake_minimum_required(VERSION 3.5.1 FATAL_ERROR)

if(@PKG_NAME@_CONFIG_INCLUDED)

  # Check that each of the components requested in this call to find_package(~)
  # have already been found.
  set(@PKG_NAME@_all_requested_components_found true)
  foreach(component ${@PKG_NAME@_FIND_COMPONENTS})
    if(NOT @PKG_NAME@-${component}_FOUND)
      set(@PKG_NAME@_all_requested_components_found false)
      break()
    endif()
  endforeach()

  # If this @PKG_NAME@-config.cmake file has been called before,
  # and all the requested components are already found, then exit early.
  if(@PKG_NAME@_all_requested_components_found)
    return()
  endif()
endif()
set(@PKG_NAME@_CONFIG_INCLUDED TRUE)

@PACKAGE_INIT@

# Get access to the find_dependency utility
include(CMakeFindDependencyMacro)
# Find ignition-cmake, because we need its modules in order to find the rest of
# our dependencies.
find_dependency(ignition-cmake@IGNITION_CMAKE_VERSION_MAJOR@)

# Set the REQUIRED flag for the find_package(~) calls on this project's
# dependencies.
if(@PKG_NAME@_FIND_REQUIRED)
  set(ign_package_required REQUIRED)
else()
  set(ign_package_required "")
endif()

# Set the QUIET flag for the find_package(~) calls on this project's
# dependencies.
if(@PKG_NAME@_FIND_QUIETLY)
  set(ign_package_quiet QUIET)
else()
  set(ign_package_quiet "")
endif()

# --------------------------------
# Find each required dependency of this project (if nothing is below, then the
# project has no external dependencies). We use find_package(~) instead of
# find_dependency(~) here so that we can support COMPONENT arguments.
#
# TODO: When we migrate to cmake-3.9+, change these to find_dependency(~),
#       because at that point the find_dependency(~) function will support
#       the COMPONENT argument.
@PROJECT_CMAKE_DEPENDENCIES@
# --------------------------------

if(NOT TARGET @import_target_name@)
  include("${CMAKE_CURRENT_LIST_DIR}/@target_output_filename@")
endif()

# On windows we produce .dll libraries with no prefix
if(WIN32)
  set(CMAKE_FIND_LIBRARY_PREFIXES "")
  set(CMAKE_FIND_LIBRARY_SUFFIXES ".lib" ".dll")
endif()

# Package variables. Note that @PKG_NAME@_LIBRARIES merely contains an imported
# target for the library, so it is sufficient to simply link to
# @PKG_NAME@_LIBRARIES. None of the other package variables are needed.
set(@PKG_NAME@_LIBRARIES @import_target_name@)
set_and_check(@PKG_NAME@_INCLUDE_DIRS "@PACKAGE_IGN_INCLUDE_INSTALL_DIR_FULL@")

# Backwards compatibility variables
set(@PROJECT_NAME_NO_VERSION_UPPER@_LIBRARIES ${@PKG_NAME@_LIBRARIES})
set(@PROJECT_NAME_NO_VERSION_UPPER@_INCLUDE_DIRS ${@PKG_NAME@_INCLUDE_DIRS})

# This macro is used by ignition-cmake to automatically configure the pkgconfig
# files for ignition projects.
ign_pkg_config_entry(@PKG_NAME@ "@PKG_NAME@")

# Find each of the components requested by find_package(~)
foreach(component ${@PKG_NAME@_FIND_COMPONENTS})

  if(NOT @PKG_NAME@_FIND_QUIETLY)
    message(STATUS "Searching for <@PKG_NAME@> component [${component}]")
  endif()

  if(@PKG_NAME@_FIND_REQUIRED_${component})

    # Find the component package using find_dependency(~). If the user specified
    # REQUIRED or QUIET, those will automatically get forwarded to
    # find_dependency(~)
    find_dependency(@PKG_NAME@-${component} @PROJECT_VERSION_FULL_NO_SUFFIX@ EXACT)

  else()

    # If this is an optional component, use find_package(~) instead of
    # find_dependency(~) so we can ensure that the use of REQUIRED does not get
    # forwarded to it.

    # We must manually determine whether this call to find_package should be
    # given a QUIET argument or not.
    if(@PKG_NAME@_FIND_QUIETLY)
      set(ign_quiet_arg QUIET)
    else()
      set(ign_quiet_arg)
    endif()

    find_package(@PKG_NAME@-${component} @PROJECT_VERSION_FULL_NO_SUFFIX@ EXACT ${ign_quiet_arg})

  endif()

endforeach()

# Specify the doxygen tag file
set(@PROJECT_NAME_NO_VERSION_UPPER@_DOXYGEN_TAGFILE "@CMAKE_INSTALL_PREFIX@/share/ignition/@PROJECT_NAME_LOWER@_@PROJECT_VERSION_MINOR@/@PROJECT_NAME_LOWER@.tag.xml")

# Specify the API url. This is where the doxygen tag file will resolve URLS to.
set(@PROJECT_NAME_NO_VERSION_UPPER@_API_URL "https://ignitionrobotics.org/api/@IGN_DESIGNATION@/@PROJECT_VERSION_MAJOR@.@PROJECT_VERSION_MINOR@")
