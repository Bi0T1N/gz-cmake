# - Config file for the @PKG_NAME@ package.
#
# For finding and loading @PKG_NAME@ from your project, type:
#
# find_package(@PKG_NAME@)
#
# It defines the following variables:
#
#  @PKG_NAME@_FOUND        - System has @PKG_NAME@.
#  @PKG_NAME@_INCLUDE_DIRS - include directories for @PKG_NAME@ and its dependencies.
#  @PKG_NAME@_LIBRARY_DIRS - Paths in which the linker should search for libraries.
#  @PKG_NAME@_LIBRARIES    - Libraries to link against.
#  @PKG_NAME@_CXX_FLAGS    - Compiler flags for compiling C++ sources.
#  @PKG_NAME@_LDFLAGS      - Linker flags.
#
# Additionally, it will create an imported target named @import_target_name@.
# You can link your library against that target using target_link_library(~),
# and all the variables mentioned above will automatically be pulled into your
# target.

if(@PKG_NAME@_CONFIG_INCLUDED)
  return()
endif()
set(@PKG_NAME@_CONFIG_INCLUDED TRUE)

@PACKAGE_INIT@

# Get access to the find_dependency utility
include(CMakeFindDependencyMacro)

# Find ignition-cmake, because we need its modules in order to find the rest of
# our dependencies.
find_dependency(ignition-cmake@IGNITION_CMAKE_VERSION_MAJOR@)

# --------------------------------
# Find each required dependency of this project (if nothing is below, then the
# project has no external dependencies).
@PROJECT_CMAKE_DEPENDENCIES@
# --------------------------------

if(NOT TARGET @import_target_name@)
  include("${CMAKE_CURRENT_LIST_DIR}/@target_output_filename@")
endif()

# On windows we produce .dll libraries with no prefix
if(WIN32)
 set(CMAKE_FIND_LIBRARY_PREFIXES "")
 set(CMAKE_FIND_LIBRARY_SUFFIXES ".lib" ".dll")
endif()

# Compatibility
set(@PKG_NAME@_LIBRARIES @import_target_name@)
set_and_check(@PKG_NAME@_INCLUDE_DIRS "@PACKAGE_IGN_INCLUDE_INSTALL_DIR_FULL@")
set_and_check(@PKG_NAME@_LIBRARY_DIRS "@PACKAGE_IGN_LIB_INSTALL_DIR@")
set(@PKG_NAME@_LDFLAGS "-L@PACKAGE_IGN_LIB_INSTALL_DIR@")

# These variables are used by ignition-cmake to automatically configure the
# pkgconfig files for ignition projects.
set(@PKG_NAME@_PKGCONFIG_ENTRY "@PKG_NAME@")
set(@PKG_NAME@_PKGCONFIG_TYPE PROJECT_PKGCONFIG_REQUIRES)

# Find each of the components requested by find_package(~)
foreach(component ${@PKG_NAME@_FIND_COMPONENTS})

  if(NOT EXISTS ${CMAKE_CURRENT_LIST_DIR}/@PKG_NAME@-${component}-config.cmake)
    # If a config file does not exist that matches the requested component, we
    # will print a message to the caller, unless they specified the QUIET
    # argument to find_package(~).
    if(NOT @PKG_NAME@_FIND_QUIETLY)
      message(WARNING "A config-file for the [${component}] component of "
                      "[@PKG_NAME@] could not be found. Either that component "
                      "does not exist, or it was not installed on this machine.")
    endif()
  endif()

  # Find the component package using find_dependency(~). We will call this even
  # if the config file does not exist, because this function will correctly
  # handle the REQUIRED argument.
  find_dependency(@PKG_NAME@-${component} @PROJECT_VERSION_FULL@ EXACT)

endforeach()
